generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  phone         String?        @db.VarChar(255)
  passwordHash  String         @db.VarChar(255)
  role          String         @db.VarChar(255)
  refreshToken  String?        @db.VarChar(255)
  createdAt     DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @db.Timestamptz(6)
  aidRequests   AidRequest[]
  notifications Notification[]

  donations       Donation[]
  MessageSender   Message[]  @relation("MessageSender")
  MessageReceiver Message[]  @relation("MessageReceiver")
  Message         Message[]
}

model AidRequest {
  id Int @id @default(autoincrement())

  userId Int

  organizationId Int?

  type String

  description String
  status      String?
  isDeleted   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])

  organization Organization? @relation(fields: [organizationId], references: [id])
  Comment      Comment[]
  Document     Document[]
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   Int
}

model Organization {
  id            Int          @id @default(autoincrement())
  name          String
  type          String
  mission       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  aidRequest    AidRequest[]
  messages      Message[]
  campaigns     Campaign[]
  events        Event[]
  contactInfo   ContactInfo  @relation(fields: [contactInfoId], references: [id])
  contactInfoId Int
  address       Address      @relation(fields: [addressId], references: [id])
  addressId     Int
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String     @db.VarChar(255)
  aidRequestId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  aidRequest   AidRequest @relation(fields: [aidRequestId], references: [id])
}

model Document {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  url          String     @db.VarChar(255)
  aidRequestId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  aidRequest   AidRequest @relation(fields: [aidRequestId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String        @db.VarChar(255)
  senderId       Int
  receiverId     Int
  organizationId Int?
  sender         User          @relation("MessageSender", fields: [senderId], references: [id])
  receiver       User          @relation("MessageReceiver", fields: [receiverId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  User           User?         @relation(fields: [userId], references: [id])
  userId         Int?
}

model Volunteer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  tasks     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donor {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  email     String     @db.VarChar(255)
  phone     String?    @db.VarChar(255)
  donations Donation[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Donation {
  id        Int      @id @default(autoincrement())
  amount    Float
  donorId   Int
  userId    Int
  donor     Donor    @relation(fields: [donorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  events         Event[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Event {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String
  date           DateTime
  location       String
  campaignId     Int
  organizationId Int
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model TrainingMaterial {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String   @db.VarChar(255)
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id         Int          @id @default(autoincrement())
  latitude   Float
  longitude  Float
  AidRequest AidRequest[]
}

model ContactInfo {
  id           Int            @id @default(autoincrement())
  phone        String
  email        String
  contactName  String
  contactPhone String
  contactEmail String
  Organization Organization[]
}

model Address {
  id           Int            @id @default(autoincrement())
  address      String
  latitude     Float
  longitude    Float
  Organization Organization[]
}
