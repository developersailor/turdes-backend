generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserCategory {
  ELDERLY
  DISABLED
  CHRONIC_ILLNESS
  NONE
}

model User {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(255)
  email             String         @unique @db.VarChar(255)
  phone             String?        @db.VarChar(255)
  passwordHash      String         @db.VarChar(255)
  role              String         @db.VarChar(255)
  refreshToken      String?        @db.VarChar(255)
  createdAt         DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime       @updatedAt @db.Timestamptz(6)
  aidRequests       AidRequest[]
  donations         Donation[]
  MessageReceiver   Message[]      @relation("MessageReceiver")
  MessageSender     Message[]      @relation("MessageSender")
  Message           Message[]
  notifications     Notification[]
  isEmailVerified   Boolean        @default(false)
  verificationToken String?        @db.VarChar(255)
  tokenExpiresAt    DateTime?      @db.Timestamptz(6)
  category          UserCategory   @default(NONE)
  auditLogs         AuditLog[]
}

model AidRequest {
  id             Int           @id @default(autoincrement())
  type           String
  description    String
  status         String?
  organizationId Int?
  userId         Int
  locationId     Int?
  isDeleted      Boolean       @default(false)
  location       Location?     @relation(fields: [locationId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])
  Comment        Comment[]
  Document       Document[]
  qrCodeUrl      String?       @db.Text
  isUrgent       Boolean       @default(false)
  recurring      Boolean       @default(false)
  verified       Boolean       @default(false)
  reported       Boolean       @default(false)
  helpCode       String?       @db.VarChar(255)
}

model Organization {
  id            Int          @id @default(autoincrement())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  contactInfoId Int
  addressId     Int
  mission       String
  type          String
  aidRequest    AidRequest[]
  campaigns     Campaign[]
  events        Event[]
  messages      Message[]
  address       Address      @relation(fields: [addressId], references: [id])
  contactInfo   ContactInfo  @relation(fields: [contactInfoId], references: [id])
  rating        Float?
  feedback      String?
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String     @db.VarChar(255)
  aidRequestId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  aidRequest   AidRequest @relation(fields: [aidRequestId], references: [id])
}

model Document {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  url          String     @db.VarChar(255)
  aidRequestId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  aidRequest   AidRequest @relation(fields: [aidRequestId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id             Int           @id @default(autoincrement())
  content        String        @db.VarChar(255)
  senderId       Int
  receiverId     Int
  organizationId Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         Int?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  receiver       User          @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender         User          @relation("MessageSender", fields: [senderId], references: [id])
  User           User?         @relation(fields: [userId], references: [id])
}

model Volunteer {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  email          String           @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  tasks          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TaskAssignment TaskAssignment[]
}

model Donor {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  email     String     @db.VarChar(255)
  phone     String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  donations Donation[]
}

model Donation {
  id        Int      @id @default(autoincrement())
  amount    Float
  donorId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  donor     Donor    @relation(fields: [donorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  anonymous Boolean  @default(false)
}

model Campaign {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  endDate        DateTime
  targetAmount   Float
  organization   Organization @relation(fields: [organizationId], references: [id])
  events         Event[]
}

model Event {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String
  date           DateTime
  location       String
  campaignId     Int
  organizationId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model TrainingMaterial {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String   @db.VarChar(255)
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id         Int          @id @default(autoincrement())
  latitude   Float
  longitude  Float
  AidRequest AidRequest[]
}

model ContactInfo {
  id           Int            @id @default(autoincrement())
  phone        String
  email        String
  contactName  String
  contactPhone String
  contactEmail String
  Organization Organization[]
}

model Address {
  id           Int            @id @default(autoincrement())
  address      String
  latitude     Float
  longitude    Float
  Organization Organization[]
}

model TaskAssignment {
  id          Int       @id @default(autoincrement())
  volunteerId Int
  taskId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  task        Task      @relation(fields: [taskId], references: [id])
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
}

model Task {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  latitude       Float
  longitude      Float
  TaskAssignment TaskAssignment[]
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entity    String?
  entityId  String?
  metadata  Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
}
