generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  email        String       @unique @db.VarChar(255)
  phone        String?      @db.VarChar(255)
  passwordHash String       @db.VarChar(255)
  role         String       @db.VarChar(255)
  refreshToken String?      @db.VarChar(255)
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime     @updatedAt @db.Timestamptz(6)
  aidRequests  AidRequest[]
  notifications Notification[]
  messages     Message[]
  donations    Donation[]
}

model AidRequest {
  id Int @id @default(autoincrement())

  userId Int

  organizationId Int?

  type String

  description String
  latitude    Float
  longitude   Float
  status      String?
  isDeleted   Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])

  organization Organization? @relation(fields: [organizationId], references: [id])
  Comment      Comment[]
  Document     Document[]
}

model Organization {
  id              Int          @id @default(autoincrement())
  name            String
  type            String
  mission         String
  address         String
  phone           String
  email           String
  website         String?
  socialMedia     String?
  contactName     String
  contactPhone    String
  contactEmail    String
  donationAccount String
  iban            String
  taxNumber       String
  aidTypes        String
  targetAudience  String
  volunteerNeeds  String
  activeProjects  String?
  events          String?
  logo            String?
  establishedDate DateTime
  latitude        Float
  longitude       Float
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  aidRequest      AidRequest[]
  messages        Message[]
  campaigns       Campaign[]
  events          Event[]
}

model Comment {
  id           Int        @id @default(autoincrement())
  content      String     @db.VarChar(255)
  aidRequestId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  aidRequest   AidRequest @relation(fields: [aidRequestId], references: [id])
}

model Document {
  id           Int        @id @default(autoincrement())
  name         String     @db.VarChar(255)
  url          String     @db.VarChar(255)
  aidRequestId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  aidRequest   AidRequest @relation(fields: [aidRequestId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String       @db.VarChar(255)
  senderId       Int
  receiverId     Int
  organizationId Int?
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  receiver       User         @relation("MessageReceiver", fields: [receiverId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Volunteer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  tasks     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donor {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  donations Donation[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Donation {
  id        Int      @id @default(autoincrement())
  amount    Float
  donorId   Int
  userId    Int
  donor     Donor    @relation(fields: [donorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  events         Event[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Event {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  description    String
  date           DateTime
  location       String
  campaignId     Int
  organizationId Int
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model TrainingMaterial {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String   @db.VarChar(255)
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
